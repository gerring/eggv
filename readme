VARIANT LOADER README

ABOUT

    Scripts designed to retrieve and load variant data into GeneWeaver (GW).
    There are three main scripts (two for retrieval, one for loading) that 
    handle the bulk of the processing/loading and a number of utility scripts 
    to help the process.



REQUIREMENTS
	
	python 2.7
	GeneWeaver python library

INSTALLATION

	Install the GeneWeaver python library:
		$ git clone gw@s1k.pw:gwlib

SYNOPSIS

    retrieve_variants_lite.py [OPTIONS] <genome-build> <output-file>

    retrieve_variants_full.py [OPTIONS] <genome-build> <output-file>

    load_variants.py [OPTIONS] <genome-build> <variant-file> 

    annotate_variants.py [OPTIONS] <variant-file> <output-file>

    merge-variants.sh [OPTIONS] <genome-build>

    load-variants.sh [OPTIONS] <db-name> <db-user> <genome-build> <variant-file>

    delete-variants.sh [OPTIONS] <db-name> <db-user>


retrieve_variants_lite.py

    There are two scripts for retrieving variant data from NCBI,
    retrieve_variants_lite.py and retrieve_variants_full.py.
    The differences between them is in the amount of data they retrieve from
    NCBI, their disk space usage, and their run time.
    Both retrieval scripts will take several hours to run; it's best to just
    leave them running over night.

    retrieve_variants_lite.py will pull most of the necessary information from
    NCBI. It uses significantly less disk space (~250GB when using 4-5 parallel
    processes) and has a much faster run time. However, due to the way NCBI
    formats their dbSNP data sets, this script DOES NOT retrieve the functional
    consequences for each variant or any gene annotations. If you're fine with
    all variants having unknown functional consequences (variant_type table)
    or having zero annotated genes, use this script.

retrieve_variants_full.py

    retrieve_variants_full.py grabs all dbSNP data and includes functional
    consequences and gene annotations. It uses more disk space (~400GB
    when using 4-5 parallel processes) and takes longer to run. If you
    want/need the extra data, use this script.

load_variants.py

    The load_variants.py script does the final bit of processing and loads
    dbSNP data into GW. It should not used directly but should be called by 
    using the helper script, load-variants.sh. 
    The helper script disables constraints/triggers and deletes/rebuilds
    indexes for faster loading.

annotate_variants.py

    annotate_variants.py can be used to annotate variants to their genes. This
    script can only operate on the output of retrieve_variants_full.py. It will
    generate a flat file of annotated variants and another file containing
    intergenic SNPs that were not annotated.

merge-variants.sh

    Both of the retrieval scripts gets variant separately for each chromosome.
    This script merges each separate file into a single one required by the
    loader scripts.

load-variants.sh

    A helper script for loading procesed variant data into GW. This script will
    disable DB constraints/triggers and delete any indexes prior to loading.
    After the DB modifications, it uses load_variants.py to load the SNPs, then
    rebuilds the indexes and runs VACUUM ANALYZE on each of the modified
    tables.
    This script has two modes of operation, the default which is fast, and a
    slow mode. If disk space usage is important and you don't want to use an 
    extra ~25GGB writing to disk, use the slow option. When you gotta go fast, 
    stick with the default setting. The difference between the two is the slow 
    option uses psycopg2 to load all of the variants. The fast option loads
    only the genomic coordinate data, writes the variant data to disk, then
    uses the postgres COPY command to load everything. The default version is
    roughly 2x faster than using psycopg2. It takes ~5 hours to load 
    473,546,386 human variants and ~1.5 hours to load 126,478,343 mouse 
    variants.

delete-variants.sh

    A helper script to delete all variant related data from the DB. The script
    leaves the tables intact, it only removes rows.


EXAMPLE WORKFLOW

    Retrieve full dbSNP data sets from NCBI for the latest mouse genome build
    using four parallel proceses to speed things up:

        $ python retrieve_variants_full.py -p 4 mm10 mm10-variants.tsv

    The previous command will have generated files (one per chromosome) in a
    format like e.g. chr1-mm10-variants.tsv. Merge them into a single file for
    processing:

        $ ./merge-variants.sh mm10

    We should now have a single file called mm10-variants.tsv. We can annotate
    them to genes for later use with the annotation script:

        $ python annotate_variants.py mm10-variants.tsv annotated-mm10-variants.tsv

    Or, we can load all of our variants into GeneWeaver. If the gwlib.cfg
    configuration file exists in the current directory, we don't have to
    provide any of the database credentials, just the build and variant file:

        $ ./load-variants.sh -c mm10 mm10-variants.tsv

    Alternatively, we could provide DB creds:

        $ ./load-variants.sh gw_db_name gw_user mm10 mm10-variants.tsv

